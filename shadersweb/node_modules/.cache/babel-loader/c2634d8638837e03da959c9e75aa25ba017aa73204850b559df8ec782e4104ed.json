{"ast":null,"code":"import { EngineUtils } from \"./EngineUtils\";\nimport { EngineObjects } from \"./EngineObjects\";\nimport { sampler } from \"three/tsl\";\nexport class ResourceManager {\n  constructor(core) {\n    this.core = core;\n    this.device = this.core.device;\n    this.texturesView = {};\n    this.textures = {};\n    this.storageImages = {};\n    this.samplers = {};\n    this.buffers = {};\n    this.texNames = {};\n    this.storageNames = {};\n    this.samplersNames = {};\n    this.buffersNames = {};\n  }\n  GetTexture(name, usage, format, width, height) {\n    const id = Object.keys(this.textures);\n    this.textures[id] = new EngineObjects.TextureObj(this.device, name, usage, format, width, height, id);\n    this.texNames[id] = name;\n    return this.textures[id];\n  }\n  GetTextureView(texture) {\n    this.texturesView[texture.id] = new EngineObjects.TextureViewObj(texture);\n    return this.texturesView[texture.id];\n  }\n  GetTextureAndView(name, usage, format, width, height) {\n    const texture = this.GetTexture(name, usage, format, width, height);\n    const view = this.GetTextureView(texture);\n    return {\n      texture,\n      view\n    };\n  }\n  GetBuffer(name, usage, size) {\n    const id = Object.keys(this.buffers);\n    this.buffers[id] = new EngineObjects.BufferObj(this.device, name, size, usage, id);\n    this.buffersNames[id] = name;\n    return this.buffers[id];\n  }\n  GetSampler(name, magFilter, minFilter) {\n    const id = Object.keys(this.samplers);\n    this.samplers[id] = this.device.createSampler({\n      magFilter: magFilter,\n      minFilter: minFilter\n    });\n    this.samplersNames[id] = name;\n    return this.samplers[id];\n  }\n  CreateDefaultResources() {\n    this.GetBuffer(\"default-buffer\", GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, 1);\n    const texture = this.GetTexture(\"default-texture\", GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT, \"rgba8unorm\", 256, 256);\n    this.GetTextureView(texture);\n  }\n}\nexport class RenderNode {\n  constructor(device) {\n    this.device = device;\n  }\n  SetShaderCode(shaderCode) {\n    this.shaderCode = shaderCode;\n  }\n  Build() {}\n  ExecuteNode() {}\n}\nexport class RenderGraph {\n  constructor(core) {\n    this.renderNodes = {};\n    this.core = core;\n    this.resManager = new ResourceManager(this.core);\n  }\n  AddPass(name) {\n    if (name in this.renderNodes) {\n      return this.renderNodes[name];\n    }\n    const renderNode = new RenderNode(this.core.device);\n    this.renderNodes[name] = renderNode;\n  }\n  BeginFrame() {\n    this.currentEncoder = this.device.createCommandEncoder();\n  }\n  EndFrame() {\n    const commandBuffer = this.currentEncoder.finish();\n    this.device.queue.submit([commandBuffer]);\n  }\n}","map":{"version":3,"names":["EngineUtils","EngineObjects","sampler","ResourceManager","constructor","core","device","texturesView","textures","storageImages","samplers","buffers","texNames","storageNames","samplersNames","buffersNames","GetTexture","name","usage","format","width","height","id","Object","keys","TextureObj","GetTextureView","texture","TextureViewObj","GetTextureAndView","view","GetBuffer","size","BufferObj","GetSampler","magFilter","minFilter","createSampler","CreateDefaultResources","GPUBufferUsage","UNIFORM","COPY_DST","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","RenderNode","SetShaderCode","shaderCode","Build","ExecuteNode","RenderGraph","renderNodes","resManager","AddPass","renderNode","BeginFrame","currentEncoder","createCommandEncoder","EndFrame","commandBuffer","finish","queue","submit"],"sources":["/Users/kevinkhuu/Documents/Personal/Kkhuu_Projects/GitHub/ShadersWeb/shadersweb/src/Engine/RenderGraph.js"],"sourcesContent":["import { EngineUtils } from \"./EngineUtils\";\nimport {EngineObjects} from \"./EngineObjects\";\nimport {sampler} from \"three/tsl\";\n\nexport class ResourceManager{\n\n    constructor(core) {\n        this.core = core;\n        this.device = this.core.device;\n\n        this.texturesView= {}\n        this.textures= {}\n        this.storageImages= {}\n        this.samplers= {}\n        this.buffers= {}\n\n        this.texNames = {};\n        this.storageNames = {};\n        this.samplersNames = {};\n        this.buffersNames = {};\n    }\n\n    GetTexture(name, usage, format, width, height){\n        const id = Object.keys(this.textures);\n        this.textures[id] = new EngineObjects.TextureObj(this.device, name, usage, format, width, height,id);\n        this.texNames[id] = name;\n        return this.textures[id];\n    }\n    GetTextureView(texture){\n        this.texturesView[texture.id] =  new EngineObjects.TextureViewObj(texture);\n        return this.texturesView[texture.id];\n    }\n    GetTextureAndView(name, usage, format, width, height){\n        const texture = this.GetTexture(name, usage, format, width, height);\n        const view = this.GetTextureView(texture);\n        return {texture, view};\n    }\n    GetBuffer(name, usage, size){\n        const id = Object.keys(this.buffers);\n        this.buffers[id] = new EngineObjects.BufferObj(this.device, name, size, usage, id);\n        this.buffersNames[id] = name;\n        return this.buffers[id];\n    }\n    GetSampler(name, magFilter, minFilter){\n        const id = Object.keys(this.samplers);\n        this.samplers[id]= this.device.createSampler({\n            magFilter: magFilter,\n            minFilter: minFilter,\n        });\n        this.samplersNames[id] = name;\n        return this.samplers[id];\n    }\n\n\n    CreateDefaultResources(){\n        this.GetBuffer(\"default-buffer\", GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, 1);\n        const texture = this.GetTexture(\n            \"default-texture\",\n            GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n            \"rgba8unorm\",\n            256,\n            256);\n        this.GetTextureView(texture)\n    }\n\n\n}\nexport class RenderNode{\n\n    name;\n    device;\n    shaderCode;\n    pipeline;\n    bindGroupObj;\n\n    constructor(device) {\n        this.device = device;\n    }\n    SetShaderCode(shaderCode){\n        this.shaderCode = shaderCode;\n    }\n    Build(){\n\n\n\n    }\n    ExecuteNode(){\n\n    }\n\n}\nexport class RenderGraph{\n\n    renderNodes = {};\n    currentEncoder;\n\n    constructor(core) {\n        this.core = core;\n        this.resManager =new ResourceManager(this.core);\n    }\n    AddPass(name){\n        if (name in this.renderNodes){\n            return this.renderNodes[name];\n        }\n\n        const renderNode = new RenderNode(this.core.device);\n        this.renderNodes[name] = renderNode;\n\n    }\n    BeginFrame(){\n        this.currentEncoder =this.device.createCommandEncoder();\n    };\n\n    EndFrame(){\n\n        const commandBuffer = this.currentEncoder.finish();\n        this.device.queue.submit([commandBuffer]);\n    }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}