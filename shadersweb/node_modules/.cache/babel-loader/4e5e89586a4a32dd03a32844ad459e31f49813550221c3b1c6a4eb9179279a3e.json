{"ast":null,"code":"import { EngineUtils } from \"./EngineUtils\";\nimport { ResourceManager } from \"./RenderGraph\";\nexport const EngineObjects = {\n  BufferObj: class BufferObj {\n    constructor(device, name, size, usage, id) {\n      this.id = -1;\n      this.buffer = EngineUtils.CreateBuffer(device, name, size, usage);\n      this.id = id;\n    }\n  },\n  TextureObj: class TextureObj {\n    constructor(device, name, usage, format, width, height, id) {\n      this.id = -1;\n      this.texture = EngineUtils.CreateTexture(device, name, usage, format, width, height);\n      this.id = id;\n    }\n  },\n  TextureViewObj: class {\n    constructor(textureObj) {\n      this.textureObj = textureObj;\n      this.textureView = this.textureObj.texture.createView();\n    }\n  },\n  ExternalTextureObj: class {\n    constructor(url, name, id) {\n      this.url = url;\n      this.name = name;\n      this.id = id;\n    }\n    async LoadTexture(resManager) {\n      const imageBitmap = await EngineUtils.LoadImageBitmap(this.url);\n      const gpu = resManager.core.gpu;\n      this.textureObj = resManager.GetTexture(this.name, GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT, \"rgba8unorm\", imageBitmap.width, imageBitmap.height);\n      resManager.device.queue.copyExternalImageToTexture({\n        source: imageBitmap,\n        flipY: true\n      }, {\n        texture: this.textureObj.texture\n      }, [imageBitmap.width, imageBitmap.height, 1]);\n      this.textureViewObj = resManager.GetTextureView(this.textureObj);\n    }\n  }\n};","map":{"version":3,"names":["EngineUtils","ResourceManager","EngineObjects","BufferObj","constructor","device","name","size","usage","id","buffer","CreateBuffer","TextureObj","format","width","height","texture","CreateTexture","TextureViewObj","textureObj","textureView","createView","ExternalTextureObj","url","LoadTexture","resManager","imageBitmap","LoadImageBitmap","gpu","core","GetTexture","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","RENDER_ATTACHMENT","queue","copyExternalImageToTexture","source","flipY","textureViewObj","GetTextureView"],"sources":["/Users/kevinkhuu/Documents/Personal/Kkhuu_Projects/GitHub/ShadersWeb/shadersweb/src/Engine/EngineObjects.js"],"sourcesContent":["import { EngineUtils } from \"./EngineUtils\";\nimport { ResourceManager } from \"./RenderGraph\";\n\nexport const EngineObjects = {\n    BufferObj : class {\n\n        buffer;\n        id = -1;\n        constructor(device, name, size, usage, id) {\n            this.buffer = EngineUtils.CreateBuffer(device, name, size, usage)\n            this.id = id;\n        }\n\n    },\n\n    TextureObj: class {\n\n        texture;\n        id = -1;\n        constructor(device, name, usage, format, width, height, id) {\n            this.texture = EngineUtils.CreateTexture(\n                device,\n                name,\n                usage,\n                format,\n                width,\n                height);\n            this.id = id;\n        }\n    },\n    TextureViewObj : class {\n        textureObj;\n        textureView;\n        constructor(textureObj) {\n            this.textureObj = textureObj;\n            this.textureView = this.textureObj.texture.createView();\n        }\n    },\n\n    ExternalTextureObj: class {\n        url;\n        name;\n        id;\n        textureObj;\n        textureViewObj;\n        constructor(url, name, id) {\n            this.url = url;\n            this.name = name;\n            this.id = id;\n        }\n        async LoadTexture(resManager) {\n\n            const imageBitmap = await EngineUtils.LoadImageBitmap(this.url);\n\n            const gpu = resManager.core.gpu;\n            this.textureObj = resManager.GetTexture(\n                this.name,\n                GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n                \"rgba8unorm\",\n                imageBitmap.width,\n                imageBitmap.height)\n\n            resManager.device.queue.copyExternalImageToTexture(\n                { source: imageBitmap, flipY:true},\n                { texture: this.textureObj.texture },\n                [imageBitmap.width, imageBitmap.height, 1]\n            );\n\n            this.textureViewObj = resManager.GetTextureView(this.textureObj);\n        }\n    }\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,eAAe;AAC3C,SAASC,eAAe,QAAQ,eAAe;AAE/C,OAAO,MAAMC,aAAa,GAAG;EACzBC,SAAS,EAAG,MAAZA,SAAS,CAAS;IAIdC,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAEC,EAAE,EAAE;MAAA,KAD3CA,EAAE,GAAG,CAAC,CAAC;MAEH,IAAI,CAACC,MAAM,GAAGV,WAAW,CAACW,YAAY,CAACN,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,KAAK,CAAC;MACjE,IAAI,CAACC,EAAE,GAAGA,EAAE;IAChB;EAEJ,CAAC;EAEDG,UAAU,EAAE,MAAZA,UAAU,CAAQ;IAIdR,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAEE,KAAK,EAAEK,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEN,EAAE,EAAE;MAAA,KAD5DA,EAAE,GAAG,CAAC,CAAC;MAEH,IAAI,CAACO,OAAO,GAAGhB,WAAW,CAACiB,aAAa,CACpCZ,MAAM,EACNC,IAAI,EACJE,KAAK,EACLK,MAAM,EACNC,KAAK,EACLC,MAAM,CAAC;MACX,IAAI,CAACN,EAAE,GAAGA,EAAE;IAChB;EACJ,CAAC;EACDS,cAAc,EAAG,MAAM;IAGnBd,WAAWA,CAACe,UAAU,EAAE;MACpB,IAAI,CAACA,UAAU,GAAGA,UAAU;MAC5B,IAAI,CAACC,WAAW,GAAG,IAAI,CAACD,UAAU,CAACH,OAAO,CAACK,UAAU,CAAC,CAAC;IAC3D;EACJ,CAAC;EAEDC,kBAAkB,EAAE,MAAM;IAMtBlB,WAAWA,CAACmB,GAAG,EAAEjB,IAAI,EAAEG,EAAE,EAAE;MACvB,IAAI,CAACc,GAAG,GAAGA,GAAG;MACd,IAAI,CAACjB,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACG,EAAE,GAAGA,EAAE;IAChB;IACA,MAAMe,WAAWA,CAACC,UAAU,EAAE;MAE1B,MAAMC,WAAW,GAAG,MAAM1B,WAAW,CAAC2B,eAAe,CAAC,IAAI,CAACJ,GAAG,CAAC;MAE/D,MAAMK,GAAG,GAAGH,UAAU,CAACI,IAAI,CAACD,GAAG;MAC/B,IAAI,CAACT,UAAU,GAAGM,UAAU,CAACK,UAAU,CACnC,IAAI,CAACxB,IAAI,EACTyB,eAAe,CAACC,eAAe,GAAGD,eAAe,CAACE,QAAQ,GAAGF,eAAe,CAACG,iBAAiB,EAC9F,YAAY,EACZR,WAAW,CAACZ,KAAK,EACjBY,WAAW,CAACX,MAAM,CAAC;MAEvBU,UAAU,CAACpB,MAAM,CAAC8B,KAAK,CAACC,0BAA0B,CAC9C;QAAEC,MAAM,EAAEX,WAAW;QAAEY,KAAK,EAAC;MAAI,CAAC,EAClC;QAAEtB,OAAO,EAAE,IAAI,CAACG,UAAU,CAACH;MAAQ,CAAC,EACpC,CAACU,WAAW,CAACZ,KAAK,EAAEY,WAAW,CAACX,MAAM,EAAE,CAAC,CAC7C,CAAC;MAED,IAAI,CAACwB,cAAc,GAAGd,UAAU,CAACe,cAAc,CAAC,IAAI,CAACrB,UAAU,CAAC;IACpE;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}