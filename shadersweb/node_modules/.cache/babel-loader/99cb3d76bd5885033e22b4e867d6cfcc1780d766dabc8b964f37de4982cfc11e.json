{"ast":null,"code":"import { EngineUtils } from \"./EngineUtils\";\nimport { EngineObjects } from \"./EngineObjects\";\nexport class ResourceManager {\n  constructor(core) {\n    this.core = core;\n    this.device = this.core.device;\n    this.texturesView = {};\n    this.textures = {};\n    this.storageImages = {};\n    this.samplers = {};\n    this.buffers = {};\n  }\n  GetTexture(name, usage, format, width, height) {\n    const id = Object.keys(this.textures);\n    this.textures[id] = new EngineObjects.TextureObj(this.device, name, usage, format, width, height, id);\n    return this.textures[id];\n  }\n  GetTextureView(texture) {\n    this.texturesView[texture.id] = new EngineObjects.TextureViewObj(texture);\n    return this.texturesView[texture.id];\n  }\n  GetTextureAndView(name, usage, format, width, height) {\n    const texture = this.GetTexture(name, usage, format, width, height);\n    const view = this.GetTextureView(texture);\n    return {\n      texture,\n      view\n    };\n  }\n  GetBuffer(name, usage, size) {\n    const id = Object.keys(this.buffers);\n    this.buffers[id] = new EngineObjects.BufferObj(this.device, name, size, usage, id);\n    return this.buffers[id];\n  }\n  CreateDefaultResources() {}\n}\nexport class RenderNode {\n  constructor(device) {\n    this.device = device;\n  }\n  SetShaderCode(shaderCode) {\n    this.shaderCode = shaderCode;\n  }\n  Build() {}\n  ExecuteNode() {}\n}\nexport class RenderGraph {\n  constructor(device) {\n    this.renderNodes = {};\n    this.device = device;\n  }\n  AddPass(name) {\n    if (name in this.renderNodes) {\n      return this.renderNodes[name];\n    }\n    const renderNode = new RenderNode(this.device);\n    this.renderNodes[name] = renderNode;\n  }\n  BeginFrame() {\n    this.currentEncoder = this.device.createCommandEncoder();\n  }\n  EndFrame() {\n    const commandBuffer = this.currentEncoder.finish();\n    this.device.queue.submit([commandBuffer]);\n  }\n}","map":{"version":3,"names":["EngineUtils","EngineObjects","ResourceManager","constructor","core","device","texturesView","textures","storageImages","samplers","buffers","GetTexture","name","usage","format","width","height","id","Object","keys","TextureObj","GetTextureView","texture","TextureViewObj","GetTextureAndView","view","GetBuffer","size","BufferObj","CreateDefaultResources","RenderNode","SetShaderCode","shaderCode","Build","ExecuteNode","RenderGraph","renderNodes","AddPass","renderNode","BeginFrame","currentEncoder","createCommandEncoder","EndFrame","commandBuffer","finish","queue","submit"],"sources":["/Users/kevinkhuu/Documents/GitHub/ShadersWeb/shadersweb/src/Engine/RenderGraph.js"],"sourcesContent":["import { EngineUtils } from \"./EngineUtils\";\nimport {EngineObjects} from \"./EngineObjects\";\n\nexport class ResourceManager{\n\n    constructor(core) {\n        this.core = core;\n        this.device = this.core.device;\n        this.texturesView= {}\n        this.textures= {}\n        this.storageImages= {}\n        this.samplers= {}\n        this.buffers= {}\n    }\n\n    GetTexture(name, usage, format, width, height){\n        const id = Object.keys(this.textures);\n        this.textures[id] = new EngineObjects.TextureObj(this.device, name, usage, format, width, height,id);\n        return this.textures[id];\n    }\n    GetTextureView(texture){\n        this.texturesView[texture.id] =  new EngineObjects.TextureViewObj(texture);\n        return this.texturesView[texture.id];\n    }\n    GetTextureAndView(name, usage, format, width, height){\n        const texture = this.GetTexture(name, usage, format, width, height);\n        const view = this.GetTextureView(texture);\n        return {texture, view};\n    }\n    GetBuffer(name, usage, size){\n        const id = Object.keys(this.buffers);\n        this.buffers[id] = new EngineObjects.BufferObj(this.device, name, size, usage, id);\n        return this.buffers[id];\n    }\n\n    CreateDefaultResources(){\n\n    }\n\n\n}\nexport class RenderNode{\n\n    name;\n    device;\n    shaderCode;\n    pipeline;\n    bindGroupObj;\n\n    constructor(device) {\n        this.device = device;\n    }\n    SetShaderCode(shaderCode){\n        this.shaderCode = shaderCode;\n    }\n    Build(){\n\n\n\n    }\n    ExecuteNode(){\n\n    }\n\n}\nexport class RenderGraph{\n\n    renderNodes = {};\n    currentEncoder;\n\n    constructor(device) {\n        this.device = device;\n    }\n    AddPass(name){\n        if (name in this.renderNodes){\n            return this.renderNodes[name];\n        }\n\n        const renderNode = new RenderNode(this.device);\n        this.renderNodes[name] = renderNode;\n\n    }\n    BeginFrame(){\n        this.currentEncoder =this.device.createCommandEncoder();\n    };\n\n    EndFrame(){\n\n        const commandBuffer = this.currentEncoder.finish();\n        this.device.queue.submit([commandBuffer]);\n    }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}