{"ast":null,"code":"export const EngineUtils = {\n  CreateBuffer(device, name, size, usage) {\n    return device.createBuffer({\n      label: name,\n      size: size,\n      usage: usage\n    });\n  },\n  CreateTexture(device, width, height, format, usage) {\n    return device.createTexture({\n      size: [width, height, 1],\n      format: format,\n      usage: usage\n    });\n  },\n  async LoadImageBitmap(url) {\n    const res = await fetch(url);\n    const blob = await res.blob();\n    return await createImageBitmap(blob, {\n      colorSpaceConversion: 'none'\n    });\n  },\n  async LoadTexture(device, url) {\n    const imageBitmap = await this.LoadImageBitmap(url);\n    const texture = this.CreateTexture(device, imageBitmap.width, imageBitmap.height, \"rgba8unorm\", GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT);\n    device.queue.copyExternalImageToTexture({\n      source: imageBitmap,\n      flipY: true\n    }, {\n      texture: texture\n    }, [imageBitmap.width, imageBitmap.height, 1]);\n    const textureView = texture.createView();\n    return {\n      texture,\n      textureView\n    };\n  }\n};","map":{"version":3,"names":["EngineUtils","CreateBuffer","device","name","size","usage","createBuffer","label","CreateTexture","width","height","format","createTexture","LoadImageBitmap","url","res","fetch","blob","createImageBitmap","colorSpaceConversion","LoadTexture","imageBitmap","texture","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","RENDER_ATTACHMENT","queue","copyExternalImageToTexture","source","flipY","textureView","createView"],"sources":["/Users/kevinkhuu/Documents/GitHub/ShadersWeb/shadersweb/src/Engine/EngineUtils.js"],"sourcesContent":["export const EngineUtils = {\n    CreateBuffer(device, name, size, usage) {\n        return device.createBuffer({\n            label: name,\n            size: size,\n            usage: usage,\n        });\n    },\n\n    CreateTexture(device, width, height, format, usage) {\n        return device.createTexture({\n            size: [width, height, 1],\n            format: format,\n            usage: usage,\n        });\n    },\n    async LoadImageBitmap(url) {\n        const res = await fetch(url);\n        const blob = await res.blob();\n        return await createImageBitmap(blob, { colorSpaceConversion: 'none' });\n    },\n    async LoadTexture(device, url) {\n\n        const imageBitmap = await this.LoadImageBitmap(url);\n\n        const texture = this.CreateTexture(device,\n            imageBitmap.width,\n            imageBitmap.height,\n            \"rgba8unorm\",\n            GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT);\n\n        device.queue.copyExternalImageToTexture(\n            { source: imageBitmap, flipY:true},\n            { texture: texture },\n            [imageBitmap.width, imageBitmap.height, 1]\n        );\n\n        const textureView = texture.createView();\n\n        return { texture, textureView };\n    }\n\n};\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG;EACvBC,YAAYA,CAACC,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAE;IACpC,OAAOH,MAAM,CAACI,YAAY,CAAC;MACvBC,KAAK,EAAEJ,IAAI;MACXC,IAAI,EAAEA,IAAI;MACVC,KAAK,EAAEA;IACX,CAAC,CAAC;EACN,CAAC;EAEDG,aAAaA,CAACN,MAAM,EAAEO,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAEN,KAAK,EAAE;IAChD,OAAOH,MAAM,CAACU,aAAa,CAAC;MACxBR,IAAI,EAAE,CAACK,KAAK,EAAEC,MAAM,EAAE,CAAC,CAAC;MACxBC,MAAM,EAAEA,MAAM;MACdN,KAAK,EAAEA;IACX,CAAC,CAAC;EACN,CAAC;EACD,MAAMQ,eAAeA,CAACC,GAAG,EAAE;IACvB,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IAC5B,MAAMG,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAI,CAAC,CAAC;IAC7B,OAAO,MAAMC,iBAAiB,CAACD,IAAI,EAAE;MAAEE,oBAAoB,EAAE;IAAO,CAAC,CAAC;EAC1E,CAAC;EACD,MAAMC,WAAWA,CAAClB,MAAM,EAAEY,GAAG,EAAE;IAE3B,MAAMO,WAAW,GAAG,MAAM,IAAI,CAACR,eAAe,CAACC,GAAG,CAAC;IAEnD,MAAMQ,OAAO,GAAG,IAAI,CAACd,aAAa,CAACN,MAAM,EACrCmB,WAAW,CAACZ,KAAK,EACjBY,WAAW,CAACX,MAAM,EAClB,YAAY,EACZa,eAAe,CAACC,eAAe,GAAGD,eAAe,CAACE,QAAQ,GAAGF,eAAe,CAACG,iBAAiB,CAAC;IAEnGxB,MAAM,CAACyB,KAAK,CAACC,0BAA0B,CACnC;MAAEC,MAAM,EAAER,WAAW;MAAES,KAAK,EAAC;IAAI,CAAC,EAClC;MAAER,OAAO,EAAEA;IAAQ,CAAC,EACpB,CAACD,WAAW,CAACZ,KAAK,EAAEY,WAAW,CAACX,MAAM,EAAE,CAAC,CAC7C,CAAC;IAED,MAAMqB,WAAW,GAAGT,OAAO,CAACU,UAAU,CAAC,CAAC;IAExC,OAAO;MAAEV,OAAO;MAAES;IAAY,CAAC;EACnC;AAEJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}