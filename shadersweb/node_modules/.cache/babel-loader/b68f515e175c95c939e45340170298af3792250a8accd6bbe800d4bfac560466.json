{"ast":null,"code":"import { WgslReflect } from \"wgsl_reflect/wgsl_reflect.module\";\nimport { EngineUtils } from \"./EngineUtils\";\nimport { Core } from \"./Core\";\nimport { BindGroupBuilder } from \"./BindGroupBuilder\";\nimport { PipelineBuilder } from \"./PipelineBuilder\";\nimport { ResourceManager } from \"./RenderGraph\";\nimport { EngineObjects } from \"./EngineObjects\";\nexport async function CreateWebGPUCanvas(width, height, shaderCode) {\n  let canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n  const core = new Core();\n  await core.Init();\n  const gpu = core.SetGpu();\n  const device = core.device;\n  const context = canvas.getContext(\"webgpu\");\n  const canvasFormat = navigator.gpu.getPreferredCanvasFormat();\n  context.configure({\n    device: device,\n    format: canvasFormat\n  });\n  const vertices = new Float32Array([\n  // Position     // UV\n  -1.0, -1.0, 0.0, 1.0,\n  // Bottom-left\n  1.0, -1.0, 1.0, 1.0,\n  // Bottom-right\n  1.0, 1.0, 0.0, 1.0,\n  // Top-right\n\n  -1.0, -1.0, 0.0, 1.0,\n  // Bottom-left (second triangle)\n  1.0, 1.0, 1.0, 1.0,\n  // Top-right\n  -1.0, 1.0, 0.0, 0.0 // Top-left\n  ]);\n  const vertexBuffer = EngineUtils.CreateBuffer(device, \"Cell vertices\", vertices.byteLength, GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST);\n  device.queue.writeBuffer(vertexBuffer, 0, vertices);\n  const vertexBufferLayout = {\n    arrayStride: 16,\n    attributes: [{\n      format: \"float32x2\",\n      offset: 0,\n      shaderLocation: 0\n    }, {\n      format: \"float32x2\",\n      offset: 0,\n      shaderLocation: 1\n    }]\n  };\n  const ShaderModule = device.createShaderModule({\n    label: \"Base Shader\",\n    code: shaderCode\n  });\n  const bufferSize = 4 * 4; //vec4\n  const uniformBuffer = EngineUtils.CreateBuffer(device, \"BufferTest\", bufferSize, GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST);\n  const data = new Float32Array([1.0, 0.5, 1.0, 1.0]);\n  device.queue.writeBuffer(uniformBuffer, 0, data);\n  const sampler = device.createSampler({\n    magFilter: \"linear\",\n    minFilter: \"linear\"\n  });\n  const resManager = new ResourceManager(core);\n  const externalTexture = new EngineObjects.ExternalTextureObj(\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Happy_smiley_face.png/800px-Happy_smiley_face.png\", \"happy face\", 0);\n  await externalTexture.LoadTexture(resManager);\n  const bindGroupBuilder = new BindGroupBuilder();\n  bindGroupBuilder.AddBuffer(0, GPUShaderStage.FRAGMENT, {\n    type: \"uniform\"\n  }, {\n    buffer: uniformBuffer\n  }).AddImage(1, GPUShaderStage.FRAGMENT, externalTexture.textureViewObj.textureView).AddSampler(2, GPUShaderStage.FRAGMENT, sampler);\n  const bindGroupObj = bindGroupBuilder.Build(device);\n  const pipelineLayout = device.createPipelineLayout({\n    bindGroupLayouts: [bindGroupObj.BindGroupLayout]\n  });\n  const pipelineBuilder = new PipelineBuilder();\n  pipelineBuilder.SetVertexBufferLayout(vertexBufferLayout).SetShaderModule(ShaderModule).SetPipelineLayout(pipelineLayout).AddColorAttachmentTarget({\n    format: canvasFormat\n  });\n  const pipeline = pipelineBuilder.Build(device);\n\n  // const Pipeline = device.createRenderPipeline({\n  //     label: \"Graphics Pipeline\",\n  //     layout: pipelineLayout,\n  //     vertex: {\n  //         module: ShaderModule,\n  //         entryPoint: \"vertexMain\",\n  //         buffers: [vertexBufferLayout]\n  //     },\n  //     fragment: {\n  //         module: ShaderModule,\n  //         entryPoint: \"fragmentMain\",\n  //         targets: [{\n  //             format: canvasFormat\n  //         }],\n  //     }\n  // })\n  const encoder = device.createCommandEncoder();\n  const renderPass = encoder.beginRenderPass({\n    colorAttachments: [{\n      view: context.getCurrentTexture().createView(),\n      loadOp: \"clear\",\n      storeOp: \"store\",\n      clearValue: {\n        r: 0,\n        g: 0,\n        b: 0.4,\n        a: 1\n      }\n    }]\n  });\n  renderPass.setPipeline(pipeline);\n  renderPass.setBindGroup(0, bindGroupObj.bindGroup);\n  renderPass.setVertexBuffer(0, vertexBuffer);\n  renderPass.draw(6);\n  renderPass.end();\n  const commandBuffer = encoder.finish();\n  device.queue.submit([commandBuffer]);\n  return canvas;\n}\n_c = CreateWebGPUCanvas;\nvar _c;\n$RefreshReg$(_c, \"CreateWebGPUCanvas\");","map":{"version":3,"names":["WgslReflect","EngineUtils","Core","BindGroupBuilder","PipelineBuilder","ResourceManager","EngineObjects","CreateWebGPUCanvas","width","height","shaderCode","canvas","document","createElement","core","Init","gpu","SetGpu","device","context","getContext","canvasFormat","navigator","getPreferredCanvasFormat","configure","format","vertices","Float32Array","vertexBuffer","CreateBuffer","byteLength","GPUBufferUsage","VERTEX","COPY_DST","queue","writeBuffer","vertexBufferLayout","arrayStride","attributes","offset","shaderLocation","ShaderModule","createShaderModule","label","code","bufferSize","uniformBuffer","UNIFORM","data","sampler","createSampler","magFilter","minFilter","resManager","externalTexture","ExternalTextureObj","LoadTexture","bindGroupBuilder","AddBuffer","GPUShaderStage","FRAGMENT","type","buffer","AddImage","textureViewObj","textureView","AddSampler","bindGroupObj","Build","pipelineLayout","createPipelineLayout","bindGroupLayouts","BindGroupLayout","pipelineBuilder","SetVertexBufferLayout","SetShaderModule","SetPipelineLayout","AddColorAttachmentTarget","pipeline","encoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","view","getCurrentTexture","createView","loadOp","storeOp","clearValue","r","g","b","a","setPipeline","setBindGroup","bindGroup","setVertexBuffer","draw","end","commandBuffer","finish","submit","_c","$RefreshReg$"],"sources":["/Users/kevinkhuu/Documents/Personal/Kkhuu_Projects/GitHub/ShadersWeb/shadersweb/src/Engine/Entry.js"],"sourcesContent":["\nimport { WgslReflect } from \"wgsl_reflect/wgsl_reflect.module\";\nimport { EngineUtils } from \"./EngineUtils\";\nimport { Core } from \"./Core\";\nimport { BindGroupBuilder } from \"./BindGroupBuilder\";\nimport { PipelineBuilder } from \"./PipelineBuilder\";\nimport { ResourceManager } from \"./RenderGraph\";\nimport { EngineObjects } from \"./EngineObjects\";\n\n\n\nexport async function CreateWebGPUCanvas (width, height, shaderCode){\n\n    let canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n\n    const core = new Core();\n    await core.Init();\n    const gpu = core.SetGpu();\n\n    const device = core.device;\n\n    const context = canvas.getContext(\"webgpu\");\n    const canvasFormat = navigator.gpu.getPreferredCanvasFormat();\n    context.configure(\n        {\n            device: device,\n            format: canvasFormat,\n        }\n    )\n\n\n    const vertices = new Float32Array([\n        // Position     // UV\n        -1.0, -1.0,     0.0, 1.0,  // Bottom-left\n        1.0, -1.0,     1.0, 1.0,  // Bottom-right\n        1.0,  1.0,     0.0, 1.0,  // Top-right\n\n        -1.0, -1.0,     0.0, 1.0,  // Bottom-left (second triangle)\n        1.0,  1.0,     1.0, 1.0,  // Top-right\n        -1.0,  1.0,     0.0, 0.0,  // Top-left\n    ]);\n\n    const vertexBuffer = EngineUtils.CreateBuffer(device, \"Cell vertices\", vertices.byteLength, GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST);\n\n    device.queue.writeBuffer(vertexBuffer, 0, vertices);\n\n    const vertexBufferLayout = {\n        arrayStride: 16,\n        attributes: [\n            {format: \"float32x2\", offset: 0, shaderLocation: 0,},\n            {format: \"float32x2\", offset: 0, shaderLocation: 1,},\n        ]\n    };\n\n    const ShaderModule = device.createShaderModule({\n        label: \"Base Shader\",\n        code: shaderCode,\n    });\n\n\n    const bufferSize = 4 * 4; //vec4\n    const uniformBuffer = EngineUtils.CreateBuffer(device, \"BufferTest\", bufferSize, GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST);\n\n    const data = new Float32Array([1.0, 0.5, 1.0, 1.0]);\n\n    device.queue.writeBuffer(uniformBuffer, 0, data);\n\n    const sampler = device.createSampler({\n        magFilter: \"linear\",\n        minFilter: \"linear\",\n    });\n    const resManager =new ResourceManager(core);\n    const externalTexture = new EngineObjects.ExternalTextureObj(\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Happy_smiley_face.png/800px-Happy_smiley_face.png\", \"happy face\", 0);\n\n    await externalTexture.LoadTexture(resManager);\n\n\n    const bindGroupBuilder = new BindGroupBuilder();\n    bindGroupBuilder\n        .AddBuffer(0, GPUShaderStage.FRAGMENT, { type: \"uniform\" },{ buffer : uniformBuffer})\n        .AddImage(1, GPUShaderStage.FRAGMENT, externalTexture.textureViewObj.textureView)\n        .AddSampler(2, GPUShaderStage.FRAGMENT, sampler);\n\n    const bindGroupObj = bindGroupBuilder.Build(device);\n\n\n    const pipelineLayout = device.createPipelineLayout({\n        bindGroupLayouts: [bindGroupObj.BindGroupLayout]\n    });\n\n    const pipelineBuilder = new PipelineBuilder();\n\n    pipelineBuilder\n        .SetVertexBufferLayout(vertexBufferLayout)\n        .SetShaderModule(ShaderModule)\n        .SetPipelineLayout(pipelineLayout)\n        .AddColorAttachmentTarget({format: canvasFormat})\n\n    const pipeline = pipelineBuilder.Build(device);\n\n\n    // const Pipeline = device.createRenderPipeline({\n    //     label: \"Graphics Pipeline\",\n    //     layout: pipelineLayout,\n    //     vertex: {\n    //         module: ShaderModule,\n    //         entryPoint: \"vertexMain\",\n    //         buffers: [vertexBufferLayout]\n    //     },\n    //     fragment: {\n    //         module: ShaderModule,\n    //         entryPoint: \"fragmentMain\",\n    //         targets: [{\n    //             format: canvasFormat\n    //         }],\n    //     }\n    // })\n    const encoder = device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass(\n        {\n            colorAttachments: [{\n                view: context.getCurrentTexture().createView(),\n                loadOp: \"clear\",\n                storeOp: \"store\",\n                clearValue: {r: 0, g: 0, b: 0.4, a:1},\n            }],\n        }\n    )\n\n    renderPass.setPipeline(pipeline);\n    renderPass.setBindGroup(0, bindGroupObj.bindGroup);\n    renderPass.setVertexBuffer(0, vertexBuffer);\n    renderPass.draw(6);\n\n    renderPass.end();\n    const commandBuffer = encoder.finish();\n    device.queue.submit([commandBuffer]);\n\n    return canvas;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}